// tests/postRoutes.test.js
import jwt from 'jsonwebtoken';
import request from 'supertest';
import app from '../src/index.js';
import prisma from '../src/db/prisma.js';

describe('Post Routes', () => {
  let authToken;
  let userId;

  beforeAll(async () => {
    // Clear the database and create a test user
    await prisma.scheduledPost.deleteMany();
    await prisma.user.deleteMany();
    const user = await prisma.user.create({
      data: {
        username: 'testuser',
        email: 'test@example.com',
        password: 'hashedpassword',
      },
    });
    userId = user.id;
    authToken = jwt.sign({ userId: user.id }, process.env.JWT_SECRET);
  });

  afterAll(async () => {
    await prisma.$disconnect();
  });

  it('should create a new post', async () => {
    const res = await request(app)
      .post('/api/posts')
      .set('Authorization', `Bearer ${authToken}`)
      .send({
        content: 'Test post',
        platform: 'twitter',
        scheduleTime: new Date().toISOString()
      });
    expect(res.statusCode).toBe(201);
    expect(res.body).toHaveProperty('id');
    expect(res.body.content).toBe('Test post');
  });

  it('should get all posts for a user', async () => {
    const res = await request(app)
      .get('/api/posts')
      .set('Authorization', `Bearer ${authToken}`);
    expect(res.statusCode).toBe(200);
    expect(Array.isArray(res.body)).toBeTruthy();
    expect(res.body.length).toBeGreaterThan(0);
  });

  it('should get a specific post', async () => {
    const post = await prisma.scheduledPost.findFirst({ where: { userId } });
    const res = await request(app)
      .get(`/api/posts/${post.id}`)
      .set('Authorization', `Bearer ${authToken}`);
    expect(res.statusCode).toBe(200);
    expect(res.body).toHaveProperty('id', post.id);
  });

  it('should update a post', async () => {
    const post = await prisma.scheduledPost.findFirst({ where: { userId } });
    const res = await request(app)
      .put(`/api/posts/${post.id}`)
      .set('Authorization', `Bearer ${authToken}`)
      .send({
        content: 'Updated test post'
      });
    expect(res.statusCode).toBe(200);
    expect(res.body.content).toBe('Updated test post');
  });

  it('should delete a post', async () => {
    const post = await prisma.scheduledPost.findFirst({ where: { userId } });
    const res = await request(app)
      .delete(`/api/posts/${post.id}`)
      .set('Authorization', `Bearer ${authToken}`);
    expect(res.statusCode).toBe(200);
    expect(res.body.message).toBe('Post deleted successfully');
  });
});